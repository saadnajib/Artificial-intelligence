{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello this is a dummy data and in this i will tell you a story about Programers program with programing languages and a car that fall from a clif. IT WAS A SUNNY DAY WHEN WE LEFT FOR THE PICNIC DIDNT KNEW I WILL BE OUT WORST NIGHTMARE.\n"
     ]
    }
   ],
   "source": [
    "f= open(r\"C:/Users/saad najib/Desktop/bigdata.txt\",\"r\")\n",
    "if f.mode == 'r':\n",
    "    contents =f.read()\n",
    "    print(contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello this is a dummy data and in this i will tell you a story about programers program with programing languages and a car that fall from a clif. it was a sunny day when we left for the picnic didnt knew i will be out worst nightmare.\n"
     ]
    }
   ],
   "source": [
    "lower_a=contents.lower() #converting in lowercase\n",
    "print(lower_a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['hello', 'this', 'is', 'a', 'dummy', 'data', 'and', 'in', 'this', 'i', 'will', 'tell', 'you', 'a', 'story', 'about', 'programers', 'program', 'with', 'programing', 'languages', 'and', 'a', 'car', 'that', 'fall', 'from', 'a', 'clif.', 'it', 'was', 'a', 'sunny', 'day', 'when', 'we', 'left', 'for', 'the', 'picnic', 'didnt', 'knew', 'i', 'will', 'be', 'out', 'worst', 'nightmare.']\n"
     ]
    }
   ],
   "source": [
    "text=lower_a.split() #tokenization\n",
    "print(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "48"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count=len(text) #couting text \n",
    "count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hello',\n",
       " 'dummy',\n",
       " 'data',\n",
       " 'tell',\n",
       " 'story',\n",
       " 'programers',\n",
       " 'program',\n",
       " 'programing',\n",
       " 'languages',\n",
       " 'car',\n",
       " 'fall',\n",
       " 'clif.',\n",
       " 'sunny',\n",
       " 'day',\n",
       " 'left',\n",
       " 'picnic',\n",
       " 'didnt',\n",
       " 'knew',\n",
       " 'worst',\n",
       " 'nightmare.']"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk   #stop word removing \n",
    "from nltk.corpus import stopwords\n",
    "stop_words=set(stopwords.words('english'))\n",
    "filtered_sentence = [w for w in text if not w in stop_words] \n",
    "filtered_sentence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello  :  hello\n",
      "dummy  :  dummi\n",
      "data  :  data\n",
      "tell  :  tell\n",
      "story  :  stori\n",
      "programers  :  program\n",
      "program  :  program\n",
      "programing  :  program\n",
      "languages  :  languag\n",
      "car  :  car\n",
      "fall  :  fall\n",
      "clif.  :  clif.\n",
      "sunny  :  sunni\n",
      "day  :  day\n",
      "left  :  left\n",
      "picnic  :  picnic\n",
      "didnt  :  didnt\n",
      "knew  :  knew\n",
      "worst  :  worst\n",
      "nightmare.  :  nightmare.\n"
     ]
    }
   ],
   "source": [
    "from nltk.stem import PorterStemmer #stemming \n",
    "ps = PorterStemmer()\n",
    "stemmed_filtered_sentence=[]\n",
    "for w in filtered_sentence:\n",
    "    stemmed_filtered_sentence.append(ps.stem(w))\n",
    "    print(w, \" : \", ps.stem(w)) \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['hello', 'dummi', 'data', 'tell', 'stori', 'program', 'program', 'program', 'languag', 'car', 'fall', 'clif.', 'sunni', 'day', 'left', 'picnic', 'didnt', 'knew', 'worst', 'nightmare.']\n",
      "count:  20\n"
     ]
    }
   ],
   "source": [
    "print(stemmed_filtered_sentence)\n",
    "print(\"count: \",len(stemmed_filtered_sentence))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
